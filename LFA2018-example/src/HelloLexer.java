/* The following code was generated by JFlex 1.6.1 */

import java.util.*;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Hello.flex</tt>
 */
class HelloLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\1\33\1\33\1\33\23\0\1\27\4\0\1\30\1\0"+
    "\1\13\1\14\1\0\1\11\1\0\2\0\1\12\1\2\11\1\1\0"+
    "\1\10\1\0\1\7\1\26\2\0\32\3\6\0\1\21\3\3\1\17"+
    "\1\20\1\3\1\32\1\4\2\3\1\22\1\3\1\5\3\3\1\15"+
    "\1\23\1\6\1\16\1\3\1\31\3\3\1\24\1\0\1\25\7\0"+
    "\1\33\u1fa2\0\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\3\1\12\1\13\1\14\1\15\1\1"+
    "\1\3\1\16\1\0\1\17\3\0\1\20\1\0\1\21"+
    "\4\0\1\22\1\23\2\0\1\24\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\34\0\34\0\124\0\160\0\34"+
    "\0\34\0\34\0\34\0\34\0\34\0\214\0\250\0\34"+
    "\0\34\0\34\0\34\0\304\0\340\0\34\0\374\0\34"+
    "\0\u0118\0\u0134\0\u0150\0\34\0\u016c\0\34\0\u0188\0\u01a4"+
    "\0\u01c0\0\u01dc\0\34\0\34\0\u01f8\0\u0214\0\34\0\34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\5\1\16\1\17"+
    "\3\5\1\20\1\21\1\22\1\23\1\24\1\25\1\5"+
    "\1\26\35\0\2\3\36\0\1\27\12\0\1\30\30\0"+
    "\1\31\40\0\1\32\32\0\1\33\42\0\1\34\35\0"+
    "\1\35\7\0\1\36\43\0\1\37\40\0\1\40\32\0"+
    "\1\41\15\0\1\42\46\0\1\43\33\0\1\44\37\0"+
    "\1\45\32\0\1\46\30\0\1\47\33\0\1\50\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\2\1\6\11\2\1\4\11"+
    "\2\1\1\11\1\0\1\11\3\0\1\11\1\0\1\11"+
    "\4\0\2\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	LinkedHashMap<String, String> intMap  = new LinkedHashMap<>();
	LinkedHashMap<String, String> old = new LinkedHashMap<>();
  	Stack<Expression> stack = new Stack<>();
  	int flagInteger = 0;
  	LinkedList<Expression> elems = new LinkedList<>();
  	int UnassignedVar;
  	int line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HelloLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	while (stack.size() != 0) {
		elems.add(stack.pop());
	}
	Collections.reverse(elems);
	Expression last = elems.pollLast();
	Expression plast = elems.pollLast();
	SequenceNode s = new SequenceNode(plast, last);
	while (elems.size() != 0) {
		s = new SequenceNode(elems.pollLast(), s);
	}
	ArrayList<Expression> finalArray = new ArrayList<>();
	finalArray.add(s);
	stack.push(new ExprList(finalArray));

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 22: break;
          case 2: 
            { if (stack.size()!=0 && (stack.peek() instanceof Symbol) && ((Symbol) (stack.peek())).symbol().equals("=")) {
				stack.pop();
				VariableNode variable = ((VariableNode)(stack.pop()));
				if (intMap.containsKey(variable.node())) {
					intMap.put(variable.node(), yytext());
				}
				stack.push(new EqualAss(variable, new IntNode(intMap.get(variable.node()))));
			} else if ( stack.size()!=0 && (stack.peek() instanceof Symbol) && ((Symbol) (stack.peek())).symbol().equals("+")) {
	 			stack.push(new IntNode(yytext()));
			} else if ( stack.size()!=0 && (stack.peek() instanceof Symbol) && ((Symbol) (stack.peek())).symbol().equals("(")) {
				stack.push(new IntNode(yytext()));
			} else if ( stack.size()!=0 && (stack.peek() instanceof Symbol) && ((Symbol) (stack.peek())).symbol().equals(">")) {
				stack.push(new IntNode(yytext()));
			} else if ( stack.size()!=0 && (stack.peek() instanceof Symbol) && ((Symbol) (stack.peek())).symbol().equals("/")) {
				stack.pop();
				if (stack.peek() instanceof IntNode ||
					 stack.peek() instanceof VariableNode ||
					 stack.peek() instanceof DivNode ||
					 stack.peek() instanceof BracketNode) { 
					stack.push(new DivNode(stack.pop(), new IntNode(yytext())));
				} else if (stack.peek() instanceof EqualAss) {
	 				EqualAss t = (EqualAss) stack.pop();
	 				VariableNode var = t.e1;
	 				IntNode num = t.e2;
	 				DivNode div = new DivNode(num, new IntNode(yytext()));
	 				stack.push(new EqualGeneral(var, div));
	 			} else if (stack.peek() instanceof EqualAssVarVar) {
	 				EqualAssVarVar t = (EqualAssVarVar) stack.pop();
	 				VariableNode v1 = t.e1;
	 				VariableNode v2 = t.e2;
	 				DivNode div = new DivNode(v2, new IntNode(yytext()));
	 				stack.push(new EqualGeneral(v1, div));
	 			} else if (stack.peek() instanceof EqualGeneral) {
	 				EqualGeneral eq = (EqualGeneral) stack.pop();
	 				Expression o1 = eq.e1;
	 				Expression o2 = eq.e2;
	 				DivNode div = new DivNode(o2, new IntNode(yytext()));
	 				stack.push(new EqualGeneral(o1, div));
	 			}		
		}
            }
          case 23: break;
          case 3: 
            { if (flagInteger == 1) {
			String letter = yytext();
			intMap.put(letter, "null");
			old.put(letter, "null");
		} else {
			if (stack.size()!=0 && stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("=")) {
				stack.pop();
				VariableNode v = ((VariableNode) (stack.pop()));
				String new_value = yytext();
				EqualAssVarVar x = new EqualAssVarVar(new VariableNode(v.node()), new VariableNode(new_value));
				stack.push(x);
				if (intMap.containsKey(new_value)) {
					String value_letter = intMap.get(new_value);
					intMap.put(v.node(), value_letter);
				}
				
			} else if (stack.size()!=0 && (stack.peek() instanceof Symbol) && ((Symbol) (stack.peek())).symbol().equals("/")){
				stack.pop();
				if (stack.peek() instanceof IntNode ||
					 stack.peek() instanceof VariableNode ||
					 stack.peek() instanceof DivNode ||
					 stack.peek() instanceof BracketNode) {
					stack.push(new DivNode(stack.pop(), new VariableNode(yytext())));
				} else  if (stack.peek() instanceof EqualAss) {
	 				EqualAss t = (EqualAss) stack.pop();
	 				VariableNode var = t.e1;
	 				IntNode num = t.e2;
	 				DivNode div = new DivNode(num, new VariableNode(yytext()));
	 				stack.push(new EqualGeneral(var, div));
	 			} else if (stack.peek() instanceof EqualAssVarVar) {
	 				EqualAssVarVar t = (EqualAssVarVar) stack.pop();
	 				VariableNode v1 = t.e1;
	 				VariableNode v2 = t.e2;
	 				DivNode div = new DivNode(v2, new VariableNode(yytext()));
	 				stack.push(new EqualGeneral(v1, div));
	 			} else if (stack.peek() instanceof EqualGeneral) {
	 				EqualGeneral eq = (EqualGeneral) stack.pop();
	 				Expression o1 = eq.e1;
	 				Expression o2 = eq.e2;
	 				DivNode div = new DivNode(o2, new VariableNode(yytext()));
	 				stack.push(new EqualGeneral(o1, div));
	 			}		
			} else {stack.push(new VariableNode(yytext()));}
		}
            }
          case 24: break;
          case 4: 
            { stack.push(new Symbol("="));
            }
          case 25: break;
          case 5: 
            { flagInteger = 0;
	 if (stack.size() != 0 &&
	  		(stack.peek() instanceof IntNode ||
	  		 stack.peek() instanceof VariableNode ||
	  		 stack.peek() instanceof DivNode ||
	  		 stack.peek() instanceof BracketNode)) {
	 	Stack<Expression> plus = new Stack<>();
	 	while ( stack.size() != 0 &&
	 		  	(stack.peek() instanceof IntNode ||
	 		    (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("+")) ||
	 		    stack.peek() instanceof VariableNode ||
	 		    stack.peek() instanceof DivNode ||
	 		    stack.peek() instanceof BracketNode)) {
	 		if ((stack.peek() instanceof IntNode ||
	 			 stack.peek() instanceof VariableNode ||
	 			 stack.peek() instanceof DivNode ||
	 			 stack.peek() instanceof BracketNode)) {
	 			plus.push(stack.pop());
	 		} else {
	 			stack.pop();
	 		}
	 	}
	 	if (stack.peek() instanceof EqualAss) {
	 		EqualAss t = (EqualAss) stack.pop();
	 		VariableNode v = t.e1;
	 		IntNode n = t.e2;
	 		int result = Integer.parseInt(n.node());
	 		 
	 		if (plus.peek() instanceof IntNode) {
	 			IntNode a = (IntNode) plus.peek();
	 			result += Integer.parseInt(a.node());
	 		}
	 		if (plus.peek() instanceof VariableNode) {
	 			VariableNode a = (VariableNode) plus.peek();
	 			if (!old.containsKey(a.node()) || old.get(a.node()).equals("null")) {
	 				UnassignedVar = 1;
	 				line = yyline;
	 			} else {	 
	 				result += Integer.parseInt(old.get(a.node()));
	 			}
	 		}
	 		PlusNode p = new PlusNode(n, plus.pop());
	 		while (plus.size() != 0) { 		 
	 			if (plus.peek() instanceof IntNode) {
	 				IntNode a = (IntNode) plus.peek();
	 				result += Integer.parseInt(a.node());
	 			}
	 			if (plus.peek() instanceof VariableNode) {
	 				VariableNode a = (VariableNode) plus.peek();
	 				if (!old.containsKey(a.node()) || old.get(a.node()).equals("null")) {
	 					UnassignedVar = 1;
	 					line = yyline;
	 				} else {	 
	 					result += Integer.parseInt(old.get(a.node()));
	 				}
	 			}
	 			p = new PlusNode(p, plus.pop());
	 		}
	 		intMap.put(v.node(), Integer.toString(result));
	 		old.put(v.node(), Integer.toString(result));
	 		stack.push(new EqualGeneral(v, p));
	 	} else if (stack.peek() instanceof EqualAssVarVar) {
	 		EqualAssVarVar t = (EqualAssVarVar) stack.pop();
	 		VariableNode v1 = t.e1;
	 		VariableNode v2 = t.e2;
	 		int result = 0;
	 		if (old.containsKey(v2.node()) && !old.get(v2.node()).equals("null")) {
	 			result = Integer.parseInt(old.get(v2.node()));
	 		}
	 		 
	 		if (plus.peek() instanceof IntNode) {
	 			IntNode a = (IntNode) plus.peek();
	 			result += Integer.parseInt(a.node());
	 		}
	 		if (plus.peek() instanceof VariableNode) {
	 			VariableNode a = (VariableNode) plus.peek();
	 			if (!old.containsKey(a.node()) || old.get(a.node()).equals("null")) {
	 				UnassignedVar = 1;
	 				line = yyline;
	 			} else {	 
	 				result += Integer.parseInt(old.get(a.node()));
	 			}
	 		}
	 		
	 		PlusNode p = new PlusNode(v2, plus.pop());
	 		while (plus.size() != 0) {
	 			if (plus.peek() instanceof IntNode) {
	 				IntNode a = (IntNode) plus.peek();
	 				result += Integer.parseInt(a.node());
	 			}
	 			if (plus.peek() instanceof VariableNode) {
	 				VariableNode a = (VariableNode) plus.peek();
	 				if (!old.containsKey(a.node()) || old.get(a.node()).equals("null")) {
	 					UnassignedVar = 1;
	 					line = yyline;
	 				} else {	 
	 					result += Integer.parseInt(old.get(a.node()));
	 				}
	 			}
	 			p = new PlusNode(p, plus.pop());
	 		}
	 		intMap.put(v1.node(), Integer.toString(result));
	 		old.put(v1.node(), Integer.toString(result));
	 		stack.push(new EqualGeneral(v1, p));
	 	} else if (stack.peek() instanceof EqualGeneral) {
	 		EqualGeneral t = (EqualGeneral) stack.pop();
	 		Expression e1 = t.e1;
	 		Expression e2 = t.e2;
	 		 
	 		PlusNode p = new PlusNode(e2, plus.pop());
	 		while (plus.size() != 0) {
	 			p = new PlusNode(p, plus.pop());
	 		}
	 		stack.push(new EqualGeneral(e1, p));
	 	} else if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("=")) {
	 		stack.pop();
	 		Expression e1 = plus.pop();
	 		if (plus.size()!=0) {
	 			PlusNode p = new PlusNode(e1, plus.pop()); 
	 			while(plus.size()!=0) {
	 				p = new PlusNode(p, plus.pop());
	 			}
	 			stack.push(new EqualGeneral(stack.pop(), p));
	 		} else {
	 			stack.push(new EqualGeneral(stack.pop(), e1));
	 		}
	 	}
	 }
            }
          case 26: break;
          case 6: 
            { stack.push(new Symbol("+"));
            }
          case 27: break;
          case 7: 
            { stack.push(new Symbol("/"));
            }
          case 28: break;
          case 8: 
            { stack.push(new Symbol("("));
            }
          case 29: break;
          case 9: 
            { int greaterFlag = 0;
	int andFlag = 0;
	Stack<Expression> s = new Stack<>();
	while (stack.size() != 0 ) {
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("(")) {
			stack.pop();
			break;
		}
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals(">")) {
			stack.pop();
			greaterFlag = 1;
			break;
		}
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("+")) {
			stack.pop();
		} else if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("&&")) {
			stack.pop();
			andFlag = 1;
		} else
			s.push(stack.pop());
	}
	
	if (andFlag == 1) {
		AndNode node = new AndNode(s.pop(), s.pop());
		while(s.size()!=0) {
			node = new AndNode(node, s.pop());
		}
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("!")) {
			stack.push(new NotNode(new BracketNode(node)));
		} else
			stack.push(new BracketNode(node));
		/////////////////////////////////////////////////
	} else if (greaterFlag == 1) {
		Expression e1 = stack.pop();
		Expression checkhere = stack.pop();
		GreaterNode greater;
		if (s.size() >= 2) { 
			PlusNode p = new PlusNode(s.pop(), s.pop());
			while(s.size()!=0) {
				p = new PlusNode(p, s.pop());
			}
			greater = new GreaterNode(e1, p);
		} else {	
			greater = new GreaterNode(e1, s.pop());
		}
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("!")) {
			stack.pop();
			stack.push(new NotNode(new BracketNode(greater)));
		} else if (((Symbol)(checkhere)).symbol().equals("&&")) {
			stack.push(checkhere);
			stack.push(greater);
			Stack<Expression> store = new Stack<>();
			while (stack.size() != 0) {
				if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("(")) {
					stack.pop();
					break;
				}
				if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("&&"))
					stack.pop();
				else
					store.push(stack.pop());
			}
			AndNode p = new AndNode(store.pop(), store.pop());
			while(store.size()!=0) {
				p = new AndNode(p, store.pop());
			}
			stack.push(new BracketNode(p));
		} else {
			stack.push(new BracketNode(greater));
		}
		//////////////////////////////////////////////
	} else {
		if (s.size() >= 2) {
			PlusNode p = new PlusNode(s.pop(), s.pop());
			while(s.size()!=0) {
				p = new PlusNode(p, s.pop());
			}
			if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("!")) {
				stack.pop();
				stack.push(new NotNode(new BracketNode(p)));
			} else {
				stack.push(new BracketNode(p));
			}
		} else {
			if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("!")) {
				stack.pop();
				stack.push(new NotNode(new BracketNode(s.pop())));
			} else {
				stack.push(new BracketNode(s.pop()));
			}
		}
		Expression e1 = stack.pop();
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("/")) {
			stack.pop();
			Expression e2 = stack.pop();
			stack.push(new DivNode(e2, e1));
		} else {
			stack.push(e1);
		}
	}
            }
          case 30: break;
          case 10: 
            { stack.push(new Symbol("{"));
            }
          case 31: break;
          case 11: 
            { if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("{")) {
		stack.pop();
		stack.push(new BlockNode(null));
	} else {
		LinkedList<Expression> list = new LinkedList<>();
		while (stack.size() != 0) {
			if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("{")) {
				stack.pop();
				break;
			}
			list.add(stack.pop());
		}
		Collections.reverse(list);
		if (list.size() == 1) {
			stack.push(new BlockNode(list.pollLast()));	
		} else {
			Expression e1 = list.pollLast();
			Expression e2 = list.pollLast();
			SequenceNode s = new SequenceNode(e2, e1);
			while (list.size() != 0) {
				s = new SequenceNode(list.pollLast(), s);
			}
			stack.push(new BlockNode(s));
		}
	}
	Expression b1 = stack.pop();
	if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("else")) {
		stack.pop();
		Expression b2 = stack.pop();
		Expression cond = stack.pop();
		stack.pop();
		Expression ifcond = new IfNode(cond, b2, b1);
		stack.push(ifcond);
	} else {
		Expression cond = stack.pop();
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("while")) {
			stack.pop();
			stack.push(new WhileNode(cond, b1));
		} else {
			stack.push(cond);
			stack.push(b1);
		}
	}
            }
          case 32: break;
          case 12: 
            { Stack<Expression> s = new Stack<>();
	while (stack.size() != 0) {
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("("))
			break;
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("&&"))
			break;	
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("+"))
			stack.pop();
		else
			s.push(stack.pop());
	}
	
	Expression e1 = s.pop();
	if (s.size()!=0) {
		PlusNode p = new PlusNode(e1, s.pop());
		while(s.size()!=0) {
			p = new PlusNode(p, s.pop());
	 	}
		stack.push(p);
	} else {
	 	stack.push(e1);
	}
	stack.push(new Symbol(">"));
            }
          case 33: break;
          case 13: 
            { stack.push(new Symbol("!"));
            }
          case 34: break;
          case 14: 
            { System.out.print(yytext());
            }
          case 35: break;
          case 15: 
            { stack.push(new Symbol("if"));
            }
          case 36: break;
          case 16: 
            { Stack<Expression> s = new Stack<>();
	int parFlag = 0;
	int greaterFlag = 0;
	while (stack.size() != 0) {
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals(">")) {
			stack.pop();
			greaterFlag = 1;
			break;
		}
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("(")) {
			parFlag = 1;
			break;
		}
		if (stack.peek() instanceof Symbol && ((Symbol) (stack.peek())).symbol().equals("+")) {
			stack.pop();
		} else {
			s.push(stack.pop());
		}
	}
	if (parFlag == 1) {
		stack.push(s.pop());
		stack.push(new Symbol("&&"));
	} else if (greaterFlag == 1) {
		if (s.size() >= 2) {
			PlusNode p = new PlusNode(s.pop(), s.pop());
			while (s.size() != 0) {
				p = new PlusNode(p, s.pop());
			}
			stack.push(new GreaterNode(stack.pop(), p));
		} else {
			stack.push(new GreaterNode(stack.pop(), s.pop()));
		}
	}
	stack.push(new Symbol("&&"));
            }
          case 37: break;
          case 17: 
            { flagInteger = 1;
            }
          case 38: break;
          case 18: 
            { stack.push(new BoolNode(yytext(), true));
            }
          case 39: break;
          case 19: 
            { stack.push(new Symbol("else"));
            }
          case 40: break;
          case 20: 
            { stack.push(new BoolNode(yytext(), false));
            }
          case 41: break;
          case 21: 
            { stack.push(new Symbol("while"));
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java HelloLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        HelloLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new HelloLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
